###########【データバインドのエラーメッセージの書き方】############################################
#パターン1 typeMismatch.<ModelAttributeのキー名>.<フィールド名>=<エラーメッセージ>
typeMismatch.signupForm.age=数値を入力してください
typeMismatch.signupForm.birthday=yyyy/MM/dd形式で入力してください

#パターン2 typeMismatch.<フィールド名>=<エラーメッセージ>
#typeMismatch.age=数値を入力してください(パターン2)
#typeMismatch.birthday=yyyy/MM/dd形式で入力してください(パターン2)

#パターン3 typeMismatch.<フィールドのデータ型>=<エラーメッセージ>
#typeMismatch.int=数値を入力してください(パターン3)
#typeMismatch.java.util.Date=yyyy/MM/dd形式で入力してください(パターン3)

###########【バリデーションのエラーメッセージの書き方】############################################
#パターン1 <アノテーション名>.<ModelAttribute名>.<フィールド名>=<エラーメッセージ>
#ユーザーID
#ポイント１：フィールド名の表示
#signupForm.userId=ユーザーID
#NotBlank.signupForm.userId={0}を入力してください
#
#Email.signupForm.userId={0}にはメールアドレスを入力してください
#
##パスワード
##ポイント２：各パラメーターの表示
#signupForm.password=パスワード
#NotBlank.signupForm.password={0}を入力してください
#Length.signupForm.password={0}は、{2}桁以上、{1}桁以下で入力してください
#Pattern.signupForm.password={0}は半角英数字で入力してください
#
##ユーザー名
#signupForm.userName=ユーザー名
#NotBlank.signupForm.userName={0}を入力してください
#
##誕生日
#signupForm.birthday=誕生日
#NotNull.signupForm.birthday={0}を入力してください
#
##年齢
#signupForm.age=年齢
#Min.signupForm.age={0}は{1}以上を入力してください
#Max.signupForm.age={0}は{1}以下を入力してください
#
##結婚ステータス
#AssertFalse.signupForm.marriage=未婚の方のみ登録できます

#パターン2 <アノテーションクラス名>.<フィールド名>=<エラーメッセージ>
##ユーザーID
#userId=ユーザーID
#NotBlank.userId={0}を入力してください(パターン2)
#Email.userId={0}にはメールアドレスを入力してください(パターン2)
#
##パスワード
#password=パスワード
#NotBlank.password={0}を入力してください(パターン2)
#Length.password={0}は、{2}桁以上、{1}桁以下で入力してください(パターン2)
#Pattern.password={0}は半角英数字で入力してください(パターン2)
##ユーザー名
#userName=ユーザー名
#NotBlank.userName={0}を入力してください(パターン2)
##誕生日
#birthday=誕生日
#NotNull.birthday={0}を入力してください(パターン2)
##年齢
#age=年齢

##パターン3 <アノテーション名>.<フィールドのデータ型>=<エラーメッセージ>
##フィールド名
#userId=ユーザーID
#password=パスワード
#userName=ユーザー名
#birthday=誕生日
#age=年齢
#
##バリデーションエラーメッセージ
#NotBlank.java.lang.String={0}は必須入力です(パターン3)
#Email.java.lang.String={0}はメールアドレス形式で入力してください(パターン3)
#Length.java.lang.String={0}は、{2}桁以上、{1}桁以下で入力してください(パターン3)
#Pattern.java.lang.String={0}は半角英数字で入力してください(パターン3)
#NotBlank.java.lang.String={0}は必須入力です(パターン3)
#NotNull.java.util.Date={0}を入力してください(パターン3)
#Max.int={0}は{1}以下を入力してください(パターン3)
#AssertFalse.boolean=未婚の方のみ登録できます(パターン3)


##パターン4 <アノテーション名>=<エラーメッセージ>
##フィールド名
#userId=ユーザーID
#password=パスワード
#userName=ユーザー名
#birthday=誕生日age=年齢
##バリデーションエラーメッセージ
#NotBlank={0}は必須入力です(パターン4)
#Email={0}はメールアドレス形式で入力してください(パターン4)
#Length={0}は、{2}桁以上、{1}桁以下で入力してください(パターン4)
#Pattern={0}は半角英数字で入力してください(パターン4)
#NotBlank={0}は必須入力です(パターン4)
#NotNull={0}は必須入力です(パターン4)
#Min={0}は{1}以上を入力してください(パターン4)
#Max={0}は{1}以下を入力してください(パターン4)
#AssertFalse=falseのみ登録できます(パターン4)

#パターン5 <独自のキー名>=<エラーメッセージ>
#独自のキーを設定する場合、各アノテーションと、独自キーの紐付けが必要になります。
#アノテーションにmessage属性を付けます。
#
#  //必須入力、メールアドレス形式
#  @NotBlank(message="{require_check}")
#  @Email(message="{email_check}")
#  privateStringuserId;
#
# 独自キーを使う場合はmessages.propertiesではなく、ValidationMessages.propertiesというファイルにメッセージを書く必要があります。
# messages.propertiesファイルでも独自キーを使えるように設定します。
# また、独自キーを使う場合、デフォルトのままでは日本語を使うと文字化けするため、文字コードの設定も必要になります。
# それらの設定用クラスとして、WebConfigというクラスを作ります。ディレクトリ構成は以下のようになります。
#フィールド名
userId=ユーザーID
password=パスワード
userName=ユーザー名
birthday=誕生日
age=年齢
#必須入力チェック
require_check={0}は必須入力です(パターン5)
#メールアドレス形式チェック
email_check={0}はメールアドレス形式で入力してください(パターン5)
#入力文字数チェック
length_check={0}は、{2}桁以上、{1}桁以下の桁数で入力してください(パターン5)
#フォーマットチェック
pattern_check={0}は半角英数字で入力してください(パターン5)
#下限値チェック
min_check={0}は{1}以上を入力してください(パターン5)
#上限値チェック
max_check={0}は{1}以下を入力してください(パターン5)
#ステータスチェック
false_check=falseの場合のみ登録できます(パターン5)
