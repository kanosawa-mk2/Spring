
■データバインド
　手順
　　・Formクラスの作成(com.example.demo.login.domain.model.SignupForm)
　　　　@DateTimeFormatなどのアノテーションあり
　　・ControllerのメソッドにFormクラスを引数に追加(com.example.demo.login.controller.SignupController)
　　　　@ModelAttributeをつける
　　・(バインド結果を受けとる場合)ControllerのメソッドにBindingResultを引数に追加
　　・htmlにバインド用のタグを設定（th:object、th:field）

■バリデーション
　手順
　　・Fromにバリデーション用のアノテーションを設定
　　・htmlにth:errorsタグの表示領域を追加
　　
　　・バリデーションの順序の指定
　　　・@GroupSequenceのインターフェース作成(com.example.demo.login.domain.model.GroupOrder)
　　　・Formのアノテーションにgroups属性を設定
　　
　　・メッセージの設定
　　　・WebConfigでメッセージファイルの設定（なくてもデフォルトでmessages.propertiesが使用されるから大丈夫？）
　　　・messages.propertiesを作成

■AOP
　手順
　　・AOPのクラスを作成 @Aspectと@Componentをつける
　　・AOPクラスのメソッドには、JoinPoint（実行タイミング）のアノテーションを付ける
　　・JoinPointのアノテーション内に、Pointcut（実行場所）を指定する
　　・JoinPoint（実行タイミング）のアノテーション
　　　@Before：実行の前
　　　@After：実行の後（正常終了・以上終了）
　　　@Around：実行の前後
　　　@AfterReturning：正常終了後
　　　@AfterThrowing：異常終了後
　　・Pointcut（実行場所）を指定方法
　　　execution(<戻り値><パッケージ名>.<クラス名>.<メソッド名>(<引数>)
　　　bean(<Bean名>)
　　　@annotation(<パッケージ名>.<アノテーション名>)
　　　@within(<パッケージ名>.<アノテーション名>)

■タイムリーフ
　記号
　#･･･関数呼び出し
　$･･･データ参照
　@･･･タイムリーフの記載方。コンテキストパスなどを上手く補完した形式でパスを構築。
　　種類			説明
　　foo/bar			通常の相対パス
　　/foo/bar		コンテキストパスからの相対パス
　　~/foo/bar		サーバーのルートからの相対パス（/foo が他のコンテキストパスになる）
　　http://xxx/xxx	絶対パス
　　//xxx/xxx		プロトコル相対パス

■SpringJDBCの実装クラス
　SpringJDBCの実装クラスには、以下の２つがあります。
　・JdbcTemplate
　・NamedParameterJdbcTemplate

■SpringJDBCのメソッド
　登録・更新・削除はupdateメソッドを使う。
　カウントなどでは、queryForObjectメソッドを使う。
　１件だけ取得するselect文では、queryForMapメソッドを使う。
　複数件取得するselect文では、queryForListメソッドを使う。
　RowMapperを使うと、O/Rマッピングができる。
　BeanPropertyRowMapperを使えば、マッピング定義が不要。
　RowCallbackHandlerを使えば、コールバック処理ができる。

■トランザクション
　以下の2つがある
　　・宣言的トランザクション･･･よく使う
　　　トランザクションを使うためには、クラスに@Transactinalアノテーションをつける。
　　　引数を付けることでトランザクションのレベルを設定することがでる。
　　　一般的には、ビジネスロジックを担当するサービスクラスに@Transactinalアノテーションを付ける。
　　・明示的トランザクション･･･あまり使わない
　　　明示的トランザクションを使うためには、PlatformTransactionManagerとDefaultTransactionDefinitionというクラスを使う。
　　　PlatformTransactionManagerは、トランザクションを開始したり、コミットなどをするクラス。
　　　DefaultTransactionDefinitionは、トランザクションの設定をするクラス。
　　　AOPで実装する方法がある

■トランザクションの設定
　@Transactionalアノテーションに以下の属性と値を設定する。
　
　value
　　複数のトランザクションマネージャーを使用する場合、利用するトランザクションマネージャーのQualifierを指定する。
　　デフォルトのトランザクションマネージャーを使用する場合は省略可能です。
　transactionManager
　　valueの別名
　propagation
　　トランザクションの伝播レベルを指定します。詳細は後述。
　isolation
　　トランザクションの分離レベルを指定します。詳細は後述。
　timeout
　　トランザクションのタイムアウト時間（秒）を指定します。
　　デフォルトは-1（使用するデータベースの仕様や設定に依存）
　readOnly
　　トランザクションの読取専用フラグを指定します。
　　デフォルトはfalse（読取専用ではない）
　rollbackFor
　　トランザクションのロールバック対象とする例外クラスのリストを指定する。
　　デフォルトではRuntimeException（非検査例外）がロールバック対象。
　rollbackForClassName
　　トランザクションのロールバック対象とする例外クラス名のリストを指定。
　　デフォルトは空（指定なし）
　noRollbackFor
　　トランザクションのコミット対象とする例外クラスのリストを指定。
　　デフォルトは空（指定なし）
　noRollbackForClassName
　　トランザクションのコミット対象とする例外クラス名のリストを指定。
　　デフォルトは空（指定なし）

■トランザクションの分離レベル(isolation)
　トランザクションを複数同時に実行しても、正常な処理をしなければならないこと
　データベース製品によっては使えないレベルもありますので、注意
　DEFAULT
　　利用するデータベースのデフォルトの分離レベルを利用。
　READ_UNCOMMITTED
　　他のトランザクションが、まだコミットしていないデータを読み出せる。
　　もし変更データがロールバックされた場合、次のトランザクションでは無効な行データが検索される。
　READ_COMMITTED
　　他のトランザクションがコミットしていないデータは読み出せない。
　REPEATABLE_READ
　　トランザクション内で、複数回データを読み込んだ場合、他のトランザクションが途中でデータを変更しても、同じ値が読み込まれる。
　SERIALIZABLE
　　トランザクションをひとつひとつ、順番に処理する。

■トランザクションの伝播レベル(propagation)
　トランザクションを新たに作成して開始するのかどうか
　特に重要なのが、サービスクラスから別のサービスクラスを呼び出す場合。
　トランザクションを開始するのか、あるいは、既にあるトランザクションに参加するのかを設定できる。
　
　REQUIRED
　　デフォルトの伝播レベル。
　　REQUIREDはトランザクションが存在しない場合、新規にトランザクションを開始する。
　　既に存在する場合はそのトランザクションを利用する。
　REQUIRES_NEW
　　必ず、新規のトランザクションを作成する。
　MANDATORY
　　MANDATORYは、すでにトランザクションが存在することを前提にする。
　　トランザクションが存在しない場合、例外が発生する。
　　すでに存在する場合は、そのトランザクションを利用する。
　NEVER
　　NEVERはトランザクションを使用しない。
　　すでにトランザクションが存在する場合は例外が発生する。
　NOT_SUPPORTED
　　NOT_SUPPORTEDはトランザクションを使用しない。
　　すでにトランザクションが存在する場合はそのトランザクションを一時停止し、
　　トランザクションを使用せずに処理を実行後、停止していたトランザクションを再開する。
　SUPPORTS
　　トランザクションが存在しない場合、トランザクションは作成しない。
　　既にに存在する場合は、そのトランザクションを利用する。
　NESTEDネストしたトランザクションを作成する。
　　トランザクションが存在しない場合、新規にトランザクションを開始し、
　　すでに存在する場合はそのトランザクションを利用するが、その部分だけネストしたトランザクションのように処理される。


　まとめ
　              サービス２に伝播レベルを設定
　伝播レベル    サービス２を直接呼出        サービス１経由でサービス２を呼出
　----------------------------------------------------------------------------------------
　REQUIRED      トランザクション開始        サービス１のトランザクションに参加
　REQUIRES_NEW  トランザクション開始        トランザクション開始
　MANDATORY      例外を投げる               サービス１のトランザクションに参加
　NEVER         トランザクションを行わない  例外を投げる
　NOT_SUPPORTED トランザクションを行わない  トランザクションを行わない
　SUPPORTS      トランザクションを行わない  サービス１のトランザクションに参加
　NESTED        トランザクション開始        部分的なトランザクション開始


